<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\shutter_m3.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\shutter_m3.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Sun Apr 24 11:51:34 2016
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; hci_app_callback &rArr; btm_acl_handle_nocopy &rArr; l2cap_btm_datarecv_callback &rArr; l2cap_handle_signal &rArr; l2cap_get_conn_req &rArr; btm_security_askfor_authority &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[11b]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[10e]">search_buffer_index</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">search_buffer_index</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">SystemInit_ExtMemCtl</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from uart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4b]">fputc</a> from print.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[102]">hid_control_l2cap_notify_callback</a> from hid.o(.text) referenced 2 times from hid.o(.text)
 <LI><a href="#[101]">hid_interrupt_l2cap_notify_callback</a> from hid.o(.text) referenced 3 times from hid.o(.text)
 <LI><a href="#[100]">hid_l2cap_data_callback</a> from hid.o(.text) referenced 5 times from hid.o(.text)
 <LI><a href="#[ca]">l2cap_disconn_req_timeout</a> from l2cap.o(.text) referenced from l2cap.o(.text)
 <LI><a href="#[d1]">l2cap_wait_cfg_req_timeout</a> from l2cap.o(.text) referenced from l2cap.o(.text)
 <LI><a href="#[d2]">l2cap_wait_conn_req_timeout</a> from l2cap.o(.text) referenced 2 times from l2cap.o(.text)
 <LI><a href="#[10c]">sdp_l2cap_datarecv_callback</a> from sdp.o(.text) referenced from sdp.o(.text)
 <LI><a href="#[10d]">sdp_l2cap_notify_callback</a> from sdp.o(.text) referenced from sdp.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[50]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[129]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[51]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[12b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[113]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[52]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[12c]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[57]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[12d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[130]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[131]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[132]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[133]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[134]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[135]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[136]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[137]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[138]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[139]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[140]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[141]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[5c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[142]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[143]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[144]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[145]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[146]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[147]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[148]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[149]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[54]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[56]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[14a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[58]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; hci_app_callback &rArr; btm_acl_handle_nocopy &rArr; l2cap_btm_datarecv_callback &rArr; l2cap_handle_signal &rArr; l2cap_get_conn_req &rArr; btm_security_askfor_authority &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[11c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[14c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7e]"></a>WFI_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
</UL>

<P><STRONG><a name="[14d]"></a>INTX_DISABLE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)

<P><STRONG><a name="[14e]"></a>INTX_ENABLE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)

<P><STRONG><a name="[14f]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)

<P><STRONG><a name="[59]"></a>main</STRONG> (Thumb, 532 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = main &rArr; hci_app_callback &rArr; btm_acl_handle_nocopy &rArr; l2cap_btm_datarecv_callback &rArr; l2cap_handle_signal &rArr; l2cap_get_conn_req &rArr; btm_security_askfor_authority &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_interrupt_data2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_interrupt_data
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_app_callback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue_event
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_device_mode_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_page_scan_activity
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_memory
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_localname
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_inquiry_scan_activity
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_classofdevice
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_set_localbdaddr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[49]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[61]"></a>delay_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>delay_us</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>delay_ms</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>

<P><STRONG><a name="[7a]"></a>MY_NVIC_PriorityGroupConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[79]"></a>MY_NVIC_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[151]"></a>Ex_NVIC_Config</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>MYRCC_DeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[7d]"></a>Sys_Standby</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFI_SET
</UL>

<P><STRONG><a name="[152]"></a>Sys_Soft_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>JTAG_Set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>Stm32_Clock_Init</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Stm32_Clock_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>uart_puts_noint</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>uart_put_data_noint</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_put_data_noint
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>

<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; recvhcidata_uart_rx &rArr; queue_event
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvhcidata_uart_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>uart_init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>BEEP_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, beep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>KEY_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>KEY_Scan</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>LED_Init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>hcicmd_msg_send</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_INT32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_data_noint
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_send_acl_data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_supervisiontimeout
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_authentication_req
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_scan_enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_acl_connect
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_page_timeout
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_user_confirm_req_reply
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_set_conn_encryption
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_disconnect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_linkkey_reply
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_linkkey_neg_reply
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_pincode_reply
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_accep_conn_req
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_page_scan_activity
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_memory
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_localname
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_inquiry_scan_activity
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_classofdevice
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_set_localbdaddr
</UL>

<P><STRONG><a name="[8a]"></a>hcicmd_packet_create</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hcicmd_packet_create &rArr; malloc_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_supervisiontimeout
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_authentication_req
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_scan_enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_acl_connect
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_page_timeout
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_user_confirm_req_reply
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_set_conn_encryption
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_disconnect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_linkkey_reply
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_linkkey_neg_reply
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_pincode_reply
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_accep_conn_req
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_page_scan_activity
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_memory
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_localname
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_inquiry_scan_activity
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_classofdevice
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_set_localbdaddr
</UL>

<P><STRONG><a name="[8c]"></a>btlib_hcicmd_accep_conn_req</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_accep_conn_req &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_conn_req_evt
</UL>

<P><STRONG><a name="[8d]"></a>btlib_hcicmd_pincode_reply</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_pincode_reply &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_pin_code_req_evt
</UL>

<P><STRONG><a name="[8f]"></a>btlib_hcicmd_linkkey_neg_reply</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_linkkey_neg_reply &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_link_key_req
</UL>

<P><STRONG><a name="[90]"></a>btlib_hcicmd_linkkey_reply</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_linkkey_reply &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_return_linkkeys_evt
</UL>

<P><STRONG><a name="[91]"></a>btlib_hcicmd_disconnect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_disconnect &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_encryption_change
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_authen_complete
</UL>

<P><STRONG><a name="[92]"></a>btlib_hcicmd_set_conn_encryption</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_set_conn_encryption &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_authen_complete
</UL>

<P><STRONG><a name="[93]"></a>btlib_hcicmd_user_confirm_req_reply</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_user_confirm_req_reply &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_user_confirm_req_evt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_event_handle
</UL>

<P><STRONG><a name="[6d]"></a>btlib_hcicmd_set_localbdaddr</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_set_localbdaddr &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>btlib_hcicmd_write_classofdevice</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_write_classofdevice &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>btlib_hcicmd_write_localname</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_write_localname &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>btlib_hcicmd_write_page_timeout</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>

<P><STRONG><a name="[96]"></a>btlib_hcicmd_acl_connect</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_acl_connect &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_acl_req
</UL>

<P><STRONG><a name="[97]"></a>btlib_hcicmd_write_scan_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_write_scan_enable &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_device_mode_set
</UL>

<P><STRONG><a name="[6c]"></a>btlib_hcicmd_write_memory</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_write_memory &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>btlib_hcicmd_authentication_req</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>

<P><STRONG><a name="[99]"></a>btlib_hcicmd_write_supervisiontimeout</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_write_supervisiontimeout &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_conn_complete_evt
</UL>

<P><STRONG><a name="[70]"></a>btlib_hcicmd_write_page_scan_activity</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_write_page_scan_activity &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>btlib_hcicmd_write_inquiry_scan_activity</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = btlib_hcicmd_write_inquiry_scan_activity &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>recvhcidata_uart_rx</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, hcitask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = recvhcidata_uart_rx &rArr; queue_event
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_event
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_INT32
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_buffer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>hci_app_callback</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hcitask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = hci_app_callback &rArr; btm_acl_handle_nocopy &rArr; l2cap_btm_datarecv_callback &rArr; l2cap_handle_signal &rArr; l2cap_get_conn_req &rArr; btm_security_askfor_authority &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_event_handle
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_acl_handle_nocopy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>btm_process_cmd_complete_evt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_event_handle
</UL>

<P><STRONG><a name="[a1]"></a>btm_conn_add</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_conn_req_evt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_conn_complete_evt
</UL>

<P><STRONG><a name="[9e]"></a>btm_conn_acl_close</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = btm_conn_acl_close &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_conn_close
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_disconn_complete_evt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_conn_complete_evt
</UL>

<P><STRONG><a name="[a0]"></a>btm_process_conn_complete_evt</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = btm_process_conn_complete_evt &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_acl_close
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_add
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_supervisiontimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_event_handle
</UL>

<P><STRONG><a name="[a3]"></a>btm_process_conn_req_evt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = btm_process_conn_req_evt &rArr; btlib_hcicmd_accep_conn_req &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_add
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_accep_conn_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_event_handle
</UL>

<P><STRONG><a name="[a4]"></a>btm_process_disconn_complete_evt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = btm_process_disconn_complete_evt &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_acl_close
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_event_handle
</UL>

<P><STRONG><a name="[a5]"></a>btm_process_pin_code_req_evt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = btm_process_pin_code_req_evt &rArr; btlib_hcicmd_pincode_reply &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_pincode_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_event_handle
</UL>

<P><STRONG><a name="[a6]"></a>btm_process_link_key_req_evt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, btm_handle_hcievent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_link_key_req
</UL>

<P><STRONG><a name="[a8]"></a>btm_process_link_key_notify_evt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btm_process_link_key_notify_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_stored_linkkey
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_event_handle
</UL>

<P><STRONG><a name="[aa]"></a>btm_process_authentication_complete_evt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = btm_process_authentication_complete_evt &rArr; btm_security_authen_complete &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_authen_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_event_handle
</UL>

<P><STRONG><a name="[ac]"></a>btm_process_encryption_change_evt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = btm_process_encryption_change_evt &rArr; btm_security_encryption_change &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_encryption_change
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_event_handle
</UL>

<P><STRONG><a name="[ae]"></a>btm_process_return_linkkeys_evt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = btm_process_return_linkkeys_evt &rArr; btlib_hcicmd_linkkey_reply &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_linkkey_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_event_handle
</UL>

<P><STRONG><a name="[af]"></a>btm_process_user_confirm_req_evt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, btm_handle_hcievent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_user_confirm_req_reply
</UL>

<P><STRONG><a name="[9d]"></a>btm_event_handle</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = btm_event_handle &rArr; btm_process_encryption_change_evt &rArr; btm_security_encryption_change &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_link_key_req
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_return_linkkeys_evt
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_encryption_change_evt
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_authentication_complete_evt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_link_key_notify_evt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_pin_code_req_evt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_disconn_complete_evt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_conn_req_evt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_conn_complete_evt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_cmd_complete_evt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_user_confirm_req_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_app_callback
</UL>

<P><STRONG><a name="[9c]"></a>btm_acl_handle_nocopy</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, btm_handle_hcievent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = btm_acl_handle_nocopy &rArr; l2cap_btm_datarecv_callback &rArr; l2cap_handle_signal &rArr; l2cap_get_conn_req &rArr; btm_security_askfor_authority &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_trim
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_putdata
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_fill
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_datarecv_callback
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_app_callback
</UL>

<P><STRONG><a name="[155]"></a>btlib_read_stored_linkkey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btm_security.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>btlib_hcicmd_write_stored_linkkey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btm_security.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_link_key_notify_evt
</UL>

<P><STRONG><a name="[a7]"></a>btm_security_link_key_req</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btm_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = btm_security_link_key_req &rArr; btlib_hcicmd_linkkey_neg_reply &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_linkkey_neg_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_link_key_req_evt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_event_handle
</UL>

<P><STRONG><a name="[ab]"></a>btm_security_authen_complete</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, btm_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = btm_security_authen_complete &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_set_conn_encryption
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_authentication_complete_evt
</UL>

<P><STRONG><a name="[ad]"></a>btm_security_encryption_change</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, btm_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = btm_security_encryption_change &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_encryption_change_evt
</UL>

<P><STRONG><a name="[b6]"></a>btm_security_askfor_authority</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, btm_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = btm_security_askfor_authority &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_req
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_wait_conn_req_timeout
</UL>

<P><STRONG><a name="[b7]"></a>hciacl_packet_create</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, btm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hciacl_packet_create &rArr; malloc_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_send_acl_data
</UL>

<P><STRONG><a name="[b8]"></a>btlib_send_acl_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, btm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciacl_packet_create
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_INT32
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btm_conn_acl_send_skb
</UL>

<P><STRONG><a name="[b9]"></a>__btm_conn_acl_send_skb</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, btm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_send_acl_data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_free
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_acl_send_skb
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_acl_senddata
</UL>

<P><STRONG><a name="[ba]"></a>btm_conn_acl_senddata</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, btm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btm_conn_acl_send_skb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_fill
</UL>

<P><STRONG><a name="[bb]"></a>btm_conn_acl_send_skb</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, btm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btm_conn_acl_send_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>

<P><STRONG><a name="[bc]"></a>btm_conn_acl_req</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, btm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = btm_conn_acl_req &rArr; btlib_hcicmd_acl_connect &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_acl_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_open
</UL>

<P><STRONG><a name="[72]"></a>btm_device_mode_set</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, btm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = btm_device_mode_set &rArr; btlib_hcicmd_write_scan_enable &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_scan_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>btm_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>l2cap_registered_psm_search</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_req
</UL>

<P><STRONG><a name="[be]"></a>l2cap_channel_search_l2caphandle</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_data
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_data_skb
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_close
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_overrun_newhandle
</UL>

<P><STRONG><a name="[bd]"></a>l2cap_overrun_newhandle</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = l2cap_overrun_newhandle
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_l2caphandle
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_newhandle
</UL>

<P><STRONG><a name="[bf]"></a>l2cap_newhandle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = l2cap_newhandle &rArr; l2cap_overrun_newhandle
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_overrun_newhandle
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_open
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_rsp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_req
</UL>

<P><STRONG><a name="[c1]"></a>l2cap_channel_search_scid</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_disconn_rsp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_disconn_req
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_rsp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_req
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_rsp
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_overrun_new_scid
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_datarecv_callback
</UL>

<P><STRONG><a name="[c0]"></a>l2cap_overrun_new_scid</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = l2cap_overrun_new_scid
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_scid
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_new_scid
</UL>

<P><STRONG><a name="[c2]"></a>l2cap_new_scid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = l2cap_new_scid &rArr; l2cap_overrun_new_scid
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_overrun_new_scid
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_add_new
</UL>

<P><STRONG><a name="[c7]"></a>l2cap_new_sigid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_req
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_req
</UL>

<P><STRONG><a name="[c3]"></a>l2cap_conn_search</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cap_conn_search &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_open
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
</UL>

<P><STRONG><a name="[f4]"></a>l2cap_conn_add_new</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_open
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
</UL>

<P><STRONG><a name="[f3]"></a>l2cap_conn_search_conn_handle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_datarecv_callback
</UL>

<P><STRONG><a name="[c4]"></a>l2cap_send_frame</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_acl_send_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_info_rsp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_echo_req
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_echo_rsp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_disconnect_rsp_raw
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_disconnect_rsp
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp_unkown
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp_reject
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_rsp_raw
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_rsp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_req
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_command_rej
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l2cap_send_data_skb
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_req
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_disconnect_req
</UL>

<P><STRONG><a name="[c5]"></a>l2cap_make_sig_req</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cap_make_sig_req
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_new_sigid
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_req
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_disconnect_req
</UL>

<P><STRONG><a name="[c8]"></a>l2cap_send_disconnect_req</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_req
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
</UL>

<P><STRONG><a name="[ca]"></a>l2cap_disconn_req_timeout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> l2cap.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>l2cap_channel_close</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_new
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_del
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_disconnect_req
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close_timer
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_close
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_open
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_receive_auth_success
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_disconn_rsp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_disconn_req
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_rsp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_rsp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_req
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_sig_rej
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_conn_close
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
</UL>

<P><STRONG><a name="[ce]"></a>l2cap_conn_close</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_acl_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
</UL>

<P><STRONG><a name="[e5]"></a>l2cap_channel_search_sigid</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_sig_rej
</UL>

<P><STRONG><a name="[e8]"></a>l2cap_channel_search_dcid</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_req
</UL>

<P><STRONG><a name="[cf]"></a>l2cap_channel_add_new</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cap_channel_add_new &rArr; l2cap_new_scid &rArr; l2cap_overrun_new_scid
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_new_scid
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_open
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_req
</UL>

<P><STRONG><a name="[d0]"></a>l2cap_send_cfg_req</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = l2cap_send_cfg_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_new_sigid
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_rsp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_req
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_rsp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_wait_cfg_req_timeout
</UL>

<P><STRONG><a name="[d1]"></a>l2cap_wait_cfg_req_timeout</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = l2cap_wait_cfg_req_timeout &rArr; l2cap_send_cfg_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_del
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cap.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>l2cap_wait_conn_req_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = l2cap_wait_conn_req_timeout &rArr; btm_security_askfor_authority &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_del
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_askfor_authority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cap.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>__l2cap_send_data_skb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_push
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_data
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_data_skb
</UL>

<P><STRONG><a name="[d5]"></a>l2cap_send_command_rej</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = l2cap_send_command_rej &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_rsp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_req
</UL>

<P><STRONG><a name="[d7]"></a>l2cap_send_connect_req</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = l2cap_send_connect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_req
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_open
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
</UL>

<P><STRONG><a name="[d8]"></a>l2cap_send_connect_rsp</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_send_connect_rsp &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_rsp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_receive_auth_success
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_req
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
</UL>

<P><STRONG><a name="[d9]"></a>l2cap_send_connect_rsp_raw</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = l2cap_send_connect_rsp_raw &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_rsp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_req
</UL>

<P><STRONG><a name="[da]"></a>l2cap_send_cfg_rsp</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = l2cap_send_cfg_rsp &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_req
</UL>

<P><STRONG><a name="[db]"></a>l2cap_send_cfg_rsp_reject</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_send_cfg_rsp_reject &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_rsp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_req
</UL>

<P><STRONG><a name="[dc]"></a>l2cap_send_cfg_rsp_unkown</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = l2cap_send_cfg_rsp_unkown &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_rsp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_save_cfgin
</UL>

<P><STRONG><a name="[dd]"></a>l2cap_send_disconnect_rsp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = l2cap_send_disconnect_rsp &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_rsp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_disconn_req
</UL>

<P><STRONG><a name="[de]"></a>l2cap_send_disconnect_rsp_raw</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_send_disconnect_rsp_raw &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_rsp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_disconn_req
</UL>

<P><STRONG><a name="[df]"></a>l2cap_send_echo_rsp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = l2cap_send_echo_rsp &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_rsp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
</UL>

<P><STRONG><a name="[e0]"></a>l2cap_send_echo_req</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, l2cap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>

<P><STRONG><a name="[e1]"></a>l2cap_send_info_rsp</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_send_info_rsp &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_rsp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
</UL>

<P><STRONG><a name="[e2]"></a>l2cap_save_cfgin</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = l2cap_save_cfgin &rArr; l2cap_send_cfg_rsp_unkown &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_pull
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp_unkown
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_req
</UL>

<P><STRONG><a name="[e4]"></a>l2cap_get_sig_rej</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = l2cap_get_sig_rej &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_pull
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_sigid
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
</UL>

<P><STRONG><a name="[e6]"></a>l2cap_get_conn_req</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = l2cap_get_conn_req &rArr; btm_security_askfor_authority &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_pull
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_rsp_raw
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_rsp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_add_new
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_dcid
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_registered_psm_search
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_askfor_authority
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
</UL>

<P><STRONG><a name="[e9]"></a>l2cap_get_conn_rsp</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = l2cap_get_conn_rsp &rArr; l2cap_send_cfg_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_pull
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_del
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_req
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_scid
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
</UL>

<P><STRONG><a name="[ea]"></a>l2cap_get_cfg_req</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = l2cap_get_cfg_req &rArr; l2cap_save_cfgin &rArr; l2cap_send_cfg_rsp_unkown &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_pull
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_del
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_save_cfgin
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp_reject
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_command_rej
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_req
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_scid
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_newhandle
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
</UL>

<P><STRONG><a name="[eb]"></a>l2cap_get_cfg_rsp</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = l2cap_get_cfg_rsp &rArr; l2cap_send_cfg_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_pull
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_req
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_scid
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_newhandle
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
</UL>

<P><STRONG><a name="[ec]"></a>l2cap_get_disconn_req</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = l2cap_get_disconn_req &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_pull
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_disconnect_rsp_raw
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_disconnect_rsp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_scid
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
</UL>

<P><STRONG><a name="[ed]"></a>l2cap_get_disconn_rsp</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = l2cap_get_disconn_rsp &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_pull
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_scid
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
</UL>

<P><STRONG><a name="[ee]"></a>l2cap_get_info_rsp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_pull
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
</UL>

<P><STRONG><a name="[ef]"></a>l2cap_handle_signal</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = l2cap_handle_signal &rArr; l2cap_get_conn_req &rArr; btm_security_askfor_authority &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_pull
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_info_rsp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_disconn_rsp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_disconn_req
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_rsp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_req
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_rsp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_req
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_sig_rej
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_info_rsp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_echo_rsp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_command_rej
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_datarecv_callback
</UL>

<P><STRONG><a name="[f0]"></a>l2cap_handle_data</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = l2cap_handle_data &rArr; skb_free &rArr; free_buffer &rArr; search_buffer_index &rArr;  search_buffer_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_del
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_datarecv_callback
</UL>

<P><STRONG><a name="[f1]"></a>l2cap_receive_auth_success</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = l2cap_receive_auth_success &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_start
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_new
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_del
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_rsp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
</UL>

<P><STRONG><a name="[a2]"></a>l2cap_btm_notify_callback</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_start
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_new
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_receive_auth_success
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_rsp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_req
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_conn_close
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_conn_search_conn_handle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_conn_add_new
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_conn_search
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_acl_close
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_askfor_authority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_encryption_change
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_security_authen_complete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_disconn_complete_evt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_conn_complete_evt
</UL>

<P><STRONG><a name="[b2]"></a>l2cap_btm_datarecv_callback</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = l2cap_btm_datarecv_callback &rArr; l2cap_handle_signal &rArr; l2cap_get_conn_req &rArr; btm_security_askfor_authority &rArr; l2cap_btm_notify_callback &rArr; l2cap_conn_close &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_pull
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_data
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_conn_search_conn_handle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_scid
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_acl_handle_nocopy
</UL>

<P><STRONG><a name="[69]"></a>l2cap_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>l2cap_register</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2cap_register
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_registered_psm_search
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_init
</UL>

<P><STRONG><a name="[156]"></a>l2cap_unregister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2cap.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>l2cap_open</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = l2cap_open &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_start
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_new
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_req
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_add_new
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_conn_add_new
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_conn_search
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_newhandle
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_acl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_open
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_control_l2cap_notify_callback
</UL>

<P><STRONG><a name="[f7]"></a>l2cap_close</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, l2cap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_l2caphandle
</UL>

<P><STRONG><a name="[f8]"></a>l2cap_channel_close_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, l2cap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
</UL>

<P><STRONG><a name="[f9]"></a>l2cap_data_skb_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = l2cap_data_skb_alloc &rArr; skb_alloc &rArr; free_buffer &rArr; search_buffer_index &rArr;  search_buffer_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_interrupt_data2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_interrupt_data
</UL>

<P><STRONG><a name="[fb]"></a>l2cap_send_data_skb</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_send_data_skb &rArr; __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l2cap_send_data_skb
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_l2caphandle
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_interrupt_data2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_interrupt_data
</UL>

<P><STRONG><a name="[fc]"></a>l2cap_send_data</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = l2cap_send_data &rArr; __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l2cap_send_data_skb
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_search_l2caphandle
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_search_req
</UL>

<P><STRONG><a name="[b4]"></a>skb_fill</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, co_skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skb_fill &rArr; malloc_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_acl_senddata
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_acl_handle_nocopy
</UL>

<P><STRONG><a name="[c9]"></a>skb_alloc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, co_skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = skb_alloc &rArr; free_buffer &rArr; search_buffer_index &rArr;  search_buffer_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_buffer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_data
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_data_skb_alloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_info_rsp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_echo_req
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_echo_rsp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_disconnect_rsp_raw
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_disconnect_rsp
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp_unkown
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp_reject
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_rsp_raw
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_rsp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_req
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_command_rej
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_req
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_disconnect_req
</UL>

<P><STRONG><a name="[b3]"></a>skb_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, co_skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = skb_free &rArr; free_buffer &rArr; search_buffer_index &rArr;  search_buffer_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_l2cap_datarecv_callback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_data
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btm_conn_acl_send_skb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_datarecv_callback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_acl_handle_nocopy
</UL>

<P><STRONG><a name="[c6]"></a>skb_put</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, co_skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_rsp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_echo_req
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_req
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_make_sig_req
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_interrupt_data2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_interrupt_data
</UL>

<P><STRONG><a name="[b1]"></a>skb_putdata</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, co_skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skb_putdata
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_acl_handle_nocopy
</UL>

<P><STRONG><a name="[d4]"></a>skb_push</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, co_skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l2cap_send_data_skb
</UL>

<P><STRONG><a name="[e3]"></a>skb_pull</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, co_skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_info_rsp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_disconn_rsp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_disconn_req
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_rsp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_req
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_rsp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_req
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_sig_rej
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_save_cfgin
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_datarecv_callback
</UL>

<P><STRONG><a name="[fa]"></a>skb_reserve</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, co_skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_data
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_data_skb_alloc
</UL>

<P><STRONG><a name="[b5]"></a>skb_trim</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, co_skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_acl_handle_nocopy
</UL>

<P><STRONG><a name="[fe]"></a>co_timer_is_running</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, co_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_resume
</UL>

<P><STRONG><a name="[157]"></a>co_timer_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_timer.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>co_timer_restart</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, co_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_resume
</UL>

<P><STRONG><a name="[fd]"></a>co_timer_resume</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, co_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_restart
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_timer_is_running
</UL>

<P><STRONG><a name="[cd]"></a>co_timer_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, co_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_receive_auth_success
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_handle_data
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_req
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_conn_rsp
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_wait_conn_req_timeout
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_wait_cfg_req_timeout
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
</UL>

<P><STRONG><a name="[f2]"></a>co_timer_start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, co_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_open
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_receive_auth_success
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
</UL>

<P><STRONG><a name="[158]"></a>co_timer_stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, co_timer.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>co_timer_new</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, co_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = co_timer_new
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_open
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_receive_auth_success
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_channel_close
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_btm_notify_callback
</UL>

<P><STRONG><a name="[78]"></a>hid_send_interrupt_data</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = hid_send_interrupt_data &rArr; l2cap_send_data_skb &rArr; __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_data_skb
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_data_skb_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>hid_send_interrupt_data2</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = hid_send_interrupt_data2 &rArr; l2cap_send_data_skb &rArr; __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_data_skb
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_data_skb_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>hid_l2cap_data_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hid.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text)
</UL>
<P><STRONG><a name="[101]"></a>hid_interrupt_l2cap_notify_callback</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hid.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text)
</UL>
<P><STRONG><a name="[102]"></a>hid_control_l2cap_notify_callback</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = hid_control_l2cap_notify_callback &rArr; l2cap_open &rArr; l2cap_channel_close &rArr; l2cap_send_disconnect_req &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>hid_open</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_open
</UL>

<P><STRONG><a name="[6b]"></a>hid_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hid_init &rArr; l2cap_register
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>get_err</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdp.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>set_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdp.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>sdp_send</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = sdp_send &rArr; l2cap_send_data &rArr; __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_rsp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send_curr_rsp
</UL>

<P><STRONG><a name="[108]"></a>sdp_getSize</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdp_getSize
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_search_attr_req
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_attr_req
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_search_req
</UL>

<P><STRONG><a name="[10b]"></a>sdp_parseData</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = sdp_parseData &rArr; process_service_search_attr_req &rArr; sdp_send_curr_rsp &rArr; sdp_send &rArr; l2cap_send_data &rArr; __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_search_attr_req
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_attr_req
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_search_req
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_l2cap_datarecv_callback
</UL>

<P><STRONG><a name="[10d]"></a>sdp_l2cap_notify_callback</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdp.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>sdp_l2cap_datarecv_callback</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = sdp_l2cap_datarecv_callback &rArr; sdp_parseData &rArr; process_service_search_attr_req &rArr; sdp_send_curr_rsp &rArr; sdp_send &rArr; l2cap_send_data &rArr; __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parseData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_free
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_buffer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdp.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>sdp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdp_init &rArr; l2cap_register
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>queue_event</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_event
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvhcidata_uart_rx
</UL>

<P><STRONG><a name="[74]"></a>dequeue_event</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dequeue_event
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>queue_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>READ_INT32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>

<P><STRONG><a name="[9b]"></a>WRITE_INT32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_send_acl_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvhcidata_uart_rx
</UL>

<P><STRONG><a name="[8b]"></a>malloc_buffer</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = malloc_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_l2cap_datarecv_callback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_search_attr_req
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_attr_req
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send_curr_rsp
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btm_conn_acl_send_skb
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciacl_packet_create
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_fill
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_packet_create
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvhcidata_uart_rx
</UL>

<P><STRONG><a name="[89]"></a>free_buffer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free_buffer &rArr; search_buffer_index &rArr;  search_buffer_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_buffer_index
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_l2cap_datarecv_callback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_search_attr_req
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_attr_req
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send_curr_rsp
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_alloc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_free
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_acl_handle_nocopy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvhcidata_uart_rx
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_app_callback
</UL>

<P><STRONG><a name="[66]"></a>buffer_init</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, print.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>print_data</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_acl_handle_nocopy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
</UL>

<P><STRONG><a name="[73]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_acl_handle_nocopy
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_data
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcicmd_msg_send
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[117]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[53]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[15b]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[9f]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_conn_search
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_acl_senddata
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_process_return_linkkeys_evt
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btm_conn_acl_close
</UL>

<P><STRONG><a name="[94]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_write_localname
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send_curr_rsp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_data
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_cfg_rsp
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_save_cfgin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp_unkown
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_req
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btm_conn_acl_send_skb
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_putdata
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_linkkey_reply
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btlib_hcicmd_pincode_reply
</UL>

<P><STRONG><a name="[114]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[15c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[10f]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[119]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[55]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[163]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[164]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[165]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d6]"></a>l2cap_make_sig_rsp</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, l2cap.o(i.l2cap_make_sig_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cap_make_sig_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_info_rsp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_echo_rsp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_disconnect_rsp_raw
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_disconnect_rsp
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp_unkown
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_cfg_rsp_reject
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_rsp_raw
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connect_rsp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_command_rej
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[11d]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[121]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[123]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[124]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[169]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[120]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[11f]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[125]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[127]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[122]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[84]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[128]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[105]"></a>sdp_send_curr_rsp</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = sdp_send_curr_rsp &rArr; sdp_send &rArr; l2cap_send_data &rArr; __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_buffer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_search_attr_req
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_attr_req
</UL>

<P><STRONG><a name="[106]"></a>send_error_rsp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = send_error_rsp &rArr; sdp_send &rArr; l2cap_send_data &rArr; __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parseData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_search_attr_req
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_attr_req
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_service_search_req
</UL>

<P><STRONG><a name="[107]"></a>process_service_search_req</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = process_service_search_req &rArr; send_error_rsp &rArr; sdp_send &rArr; l2cap_send_data &rArr; __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_getSize
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_rsp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parseData
</UL>

<P><STRONG><a name="[109]"></a>process_service_attr_req</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = process_service_attr_req &rArr; sdp_send_curr_rsp &rArr; sdp_send &rArr; l2cap_send_data &rArr; __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_getSize
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_rsp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send_curr_rsp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_buffer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parseData
</UL>

<P><STRONG><a name="[10a]"></a>process_service_search_attr_req</STRONG> (Thumb, 414 bytes, Stack size 56 bytes, sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = process_service_search_attr_req &rArr; sdp_send_curr_rsp &rArr; sdp_send &rArr; l2cap_send_data &rArr; __l2cap_send_data_skb &rArr; l2cap_send_frame &rArr; btm_conn_acl_send_skb &rArr; __btm_conn_acl_send_skb &rArr; btlib_send_acl_data &rArr; hcicmd_msg_send &rArr; print_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_getSize
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_rsp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send_curr_rsp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_buffer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parseData
</UL>

<P><STRONG><a name="[10e]"></a>search_buffer_index</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + In Cycle
<LI>Call Chain = search_buffer_index &rArr;  search_buffer_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_buffer_index
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_buffer_index
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buffer
</UL>

<P><STRONG><a name="[126]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[11e]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[4c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
